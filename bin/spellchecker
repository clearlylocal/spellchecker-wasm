#!/usr/bin/env node
const yargs = require('yargs');
const { resolve }  = require('path');
const { SpellcheckerWasm } = require('../lib/nodejs/SpellcheckerWasm.js');
const { defaultOptions, defaultCheckSpellingOptions } = require('../lib/SpellCheckerBase.js');

let args = yargs.usage('Usage: $0 <opts>')
    .option('dictionaryEditDistance', {
        alias: 'd',
        type: 'number',
        nargs: 1,
        description: 'the maximum edit distance for dictionary precalculations',
        requiresArg: true,
    })
    .option('countThreshold', {
        alias: 'c',
        type: 'number',
        nargs: 1,
        description: 'the minimum frequency count for dictionary words to be considered correct spellings',
        requiresArg: true,
    })
    .option('includeUnknown', {
        alias: 'u',
        type: 'boolean',
        nargs: 1,
        description: 'include input terms that are not in the dictionary and have no words within edit distance',
        requiresArg: true,
    })
    .option('includeSelf', {
        alias: 's',
        type: 'boolean',
        nargs: 1,
        description: 'include input word in suggestions if no words within edit distance are found',
        requiresArg: true,
    })
    .option('maxEditDistance', {
        alias: 'm',
        type: 'number',
        nargs: 1,
        description: 'maximum edit distance when performing lookups',
        requiresArg: true,
    })
    .option('verbosity', {
        alias: 'v',
        type: 'number',
        nargs: 1,
        description: 'the closeness or quantity of returned spelling suggestions (0: Top, 1: Closest, 2: All)',
        requiresArg: true,
    })
    .argv;

// Updates obj1 with values from obj2 for only those keys that are both in obj1 and obj2
let populateFromArgs = (obj1, obj2) => {
    for(let key in obj1) {
        if(obj2.hasOwnProperty(key)) {
            obj1[key] = obj2[key];
        }
    }
    return obj1;
};

const _defaultOptions = populateFromArgs({...defaultOptions}, args);
const _defaultCheckSpellingOptions = populateFromArgs({...defaultCheckSpellingOptions}, args);

const wasmPath = resolve(__dirname, '../lib/spellchecker-wasm.wasm');
const dictionaryPath = resolve(__dirname, '../lib/frequency_dictionary_en_82_765.txt');
const bigramPath = resolve(__dirname, '../lib/frequency_bigramdictionary_en_243_342.txt');

let resultHandler = (results) => {process.stdout.write(results.map(r => r.term) + '\n');};
let spellcheckerWasm = new SpellcheckerWasm(resultHandler);
spellcheckerWasm.prepareSpellchecker(wasmPath, dictionaryPath, bigramPath, _defaultOptions)
    .then(() => {
        process.stdout.write('Ready\n');
        process.stdin.on('data', data => {
            spellcheckerWasm.checkSpelling('' + data, _defaultCheckSpellingOptions);
        });
    })
    .catch((e) => {
        process.stdout.write(`Error initializing the SpellChecker\n${e}\n`);
    });
